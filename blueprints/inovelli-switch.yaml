blueprint:
  name: Inovelli Red Series Switch Buttons from Hubitat 
  description: Inovelli Red Series Switch Buttons from Hubitat.
  domain: automation
  input:
    inovelli_switch:
      name: Inovelli Red Series Switch
      description: "Hubitat device_id of HA integrated inovelli Switch"
    ## Paddle Press 1 time
    button_up_1:
      name: Up/On press 1x
      description: "Action to run, when the button is pressed one time.
      Typically, you will only set this if you have disabled the relay."
      default: []
      selector:
        action: {}
    button_down_1:
      name: Down/Off press 1x
      description: "Action to run, when the button is pressed one time.
      Typically, you will only set this if you have disabled the relay."
      default: []
      selector:
        action: {}
    ## Paddle Press 2 times
    button_up_2:
      name: Up/On press 2x
      description: "Action to run, when the button is pressed 2x up."
      default: []
      selector:
        action: {}
    button_down_2:
      name: Down/Off press 2x
      description: "Action to run, when the button is pressed 2x down."
      default: []
      selector:
        action: {}
    ## Paddle Press 3 times
    button_up_3:
      name: Up/On press 3x
      description: "Action to run, when the button is pressed 3x up."
      default: []
      selector:
        action: {}
    button_down_3:
      name: Down/Off press 3x
      description: "Action to run, when the button is pressed 3x down."
      default: []
      selector:
        action: {}
    ## Paddle Press 4 times
    button_up_4:
      name: Up/On press 4x
      description: "Action to run, when the button is pressed 4x up."
      default: []
      selector:
        action: {}
    button_down_4:
      name: Down/Off press 4x
      description: "Action to run, when the button is pressed 4x down."
      default: []
      selector:
        action: {}
mode: single
max_exceeded: silent
variables:
  device_id: !input inovelli_switch
trigger:
  - platform: event
    event_type: hubitat_event
condition: "{{ trigger.event.data.device_id == device_id }}"
action:
  - variables:
      button_id: "{{ trigger.event.data.attribute }}"
      press_count: "{{ trigger.event.data.value }}"
#  - service: "logbook.log"
#    data:
#      name: "Device"
#      message: "{{ trigger.event.data|to_json }}"
#      domain: testing
#  - service: "logbook.log"
#    data:
#      name: "Button Id (pushed/held)"
#      message: "{{ button_id }}"
#      domain: testing
#  - service: "logbook.log"
#    data:
#      name: "Press Count"
#      message: "{{ press_count }}"
#      domain: testing
  - choose:
    - conditions: '{{ press_count == 1 and button_id == "pushed" }}'
      sequence: !input button_up_1
    - conditions: '{{ press_count == 1 and button_id == "held" }}'
      sequence: !input button_down_1
    - conditions: '{{ press_count == 2 and button_id == "pushed" }}'
      sequence: !input button_up_2
    - conditions: '{{ press_count == 2 and button_id == "held" }}'
      sequence: !input button_down_2
    - conditions: '{{ press_count == 3 and button_id == "pushed" }}'
      sequence: !input button_up_3
    - conditions: '{{ press_count == 3 and button_id == "held" }}'
      sequence: !input button_down_3
    - conditions: '{{ press_count == 4 and button_id == "pushed" }}'
      sequence: !input button_up_4
    - conditions: '{{ press_count == 4 and button_id == "held" }}'
      sequence: !input button_down_4
